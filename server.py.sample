from flask import Flask
# from flask_sqlalchemy import SQLAlchemy
from app.utils.env import DB
from config import config


""" Serveur de l'application Suivi autorisations """


class ReverseProxied(object):

    def __init__(self, app, script_name=None, scheme=None, server=None):
        self.app = app
        self.script_name = script_name
        self.scheme = scheme
        self.server = server

    def __call__(self, environ, start_response):
        script_name = environ.get('HTTP_X_SCRIPT_NAME', '') or self.script_name
        if script_name:
            environ['SCRIPT_NAME'] = script_name
            path_info = environ['PATH_INFO']
            if path_info.startswith(script_name):
                environ['PATH_INFO'] = path_info[len(script_name):]
        scheme = environ.get('HTTP_X_SCHEME', '') or self.scheme
        if scheme:
            environ['wsgi.url_scheme'] = scheme
        server = environ.get('HTTP_X_FORWARDED_SERVER', '') or self.server
        if server:
            environ['HTTP_HOST'] = server
        return self.app(environ, start_response)


app = Flask(__name__, template_folder="app/templates", static_folder='static')
# app.wsgi_app = ReverseProxied(app.wsgi_app, script_name=config.URL_APPLICATION)

app.secret_key = config.SECRET_KEY
app.config['SQLALCHEMY_DATABASE_URI'] = config.SQLALCHEMY_DATABASE_URI
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = config.SQLALCHEMY_TRACK_MODIFICATIONS

DB.init_app(app)
with app.app_context():

    from app.ref_geo import api as ref_geo_api
    app.register_blueprint(ref_geo_api.bp, url_prefix='/api/ref_geo')

    from app.modules.exemple import routes as exemple_routes
    app.register_blueprint(exemple_routes.bp, url_prefix='/exemple')

    from app.modules.exemple import api as exemple_api
    app.register_blueprint(exemple_api.bp, url_prefix='/api/exemple')

# add_bp_here

if __name__ == '__main__':
    app.run(debug=config.DEBUG, port=config.PORT)
