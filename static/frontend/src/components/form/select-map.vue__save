<template>
  <div>
    aaaaa
    <div>{{ config }}</div>
    <base-map :config="mapConfig" :mapId="mapId">
      <slot name="aside">
        <div>
          <v-autocomplete
            v-model="baseModel[config.name]"
            v-if="dataSelect"
            :items="dataSelect"
            :label="config.label"
            :multiple="config.multiple ? true : false"
            dense
            small-chips
            hide-selected
            deletable-chips
            clearable
            placeholder="Choisir un element dans la liste"
            @change="change"
          ></v-autocomplete>
          <div>{{ baseModel }}</div>
        </div>
      </slot>
    </base-map>
  </div>
</template>


<script>
// import { makeMap } from "@/core/js/map/commons.js";
// import { copy } from "@/core/js/util/util.js";



export default {
  name: "selectMap",
  data: () => ({
    dataSelect: null,
    mapConfig: null,
  }),
  methods: {
    initSelect: function(e) {
      console.log(e);
      // this.dataSelect = e.detail.dataSelect;
      // this.styles = e.detail.styles;
      // this.updateLayerStyle();
    },
    // updateLayerStyle: function() {
    //   // for()

    //   if (!this.styles) {
    //     return;
    //   }
    //   console.log("updateStyle", this.styles);

    //   // selected => normal
    //   const layers = this.map.findLayers("*", "selected", true);
    //   for (const layer of layers) {
    //     layer.feature.properties.selected = false;
    //     layer.curStyle = this.styles.normal;
    //     layer.setStyle(layer.curStyle);
    //   }

    //   // model => selected

    //   let model = copy(this.baseModel[this.config.name]) || [];
    //   if (!Array.isArray(model)) {
    //     model = [model];
    //   }

    //   for (const id_area of model) {
    //     const layer = this.map.findLayer("*", "id_area", id_area);
    //     if (!layer) {
    //       // remove layer
    //       continue;
    //     }
    //     layer.feature.properties.selected = true;
    //     layer.curStyle = this.styles.selected;
    //     layer.setStyle(layer.curStyle);
    //   }
    // },
    change: function() {
      console.log("change");
      // this.config.change && this.config.change(this.baseModel);
      // this.updateLayerStyle();
    },
    // clickOnLayer: function(e) {
    //   const id_area = e.detail.id_area;

    //   // cas selection multiple
    //   if (this.config.multiple) {
    //     // init model in case of null value
    //     if (!this.baseModel[this.config.name]) {
    //       this.baseModel[this.config.name] = [];
    //     }

    //     // remove id_area if already present
    //     if (this.baseModel[this.config.name].includes(id_area)) {
    //       //remove
    //       const index = this.baseModel[this.config.name].indexOf(id_area);
    //       if (index > -1) {
    //         this.baseModel[this.config.name].splice(index, 1);
    //       }

    //       // push id_area
    //     } else {
    //       this.baseModel[this.config.name].push(id_area);
    //     }

    //     this.change();

    //     // cas selection unique
    //   } else {
    //     this.baseModel[this.config.name] = null;
    //     const $this = this;
    //     setTimeout(function() {
    //       $this.baseModel[$this.config.name] = id_area;
    //       $this.change();
    //     }, 10);
    //   }
    // }
  },
  props: ["config", "baseModel", "debug", "bShowError"],
  created: function() {
    // add event on map-data-loaded
    console.log(this.config.name);

    document
      .getElementById(this.config.name)
      .addEventListener("layer-data", this.initSelect);

    document
      .getElementById(this.config.name)
      .addEventListener("select-map-click", this.clickOnLayer);

    this.mapConfig = 

    console.log(this.map.config);
  }
};
</script>

<style lang="scss" scoped>
.md-checkbox,
.md-radio {
  display: flex;
}
</style>